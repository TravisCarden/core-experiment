<?php

namespace DrupalContribInstaller\Composer;

use Composer\Installer\LibraryInstaller;
use Composer\Package\PackageInterface;
use Composer\Repository\InstalledRepositoryInterface;

class Installer extends LibraryInstaller {

  public function install(InstalledRepositoryInterface $repo, PackageInterface $package) {
    parent::install($repo, $package); // TODO: Change the autogenerated stub
    if ($this->supportsPackage($package) && $package->getPrettyName() === 'drupal/drupal') {
      $from = 'web/modules';
      $to = 'contrib/modules';
      $this->filesystem->ensureDirectoryExists($from);
      $this->filesystem->ensureDirectoryExists($to);
      $full_from_path = realpath($from);
      $full_to_path = realpath($to);
      $this->io->write("From: {$full_from_path}");
      $this->io->write("To: {$full_to_path}");
      $this->filesystem->relativeSymlink($full_from_path, $full_to_path);
    }
  }

  public function getInstallPath(PackageInterface $package) {
    if (!$this->supportsPackage($package)) {
      return parent::getInstallPath($package);
    }
    $package_name = $package->getPrettyName();
    if ($package_name === 'drupal/drupal') {
      return 'web';
    }
    else {
      $project_name = explode('/', $package_name, 2)[1];
      return "contrib/modules/{$project_name}";
    }
  }

  public function supports($package_type) {
    return 'drupal-module' === $package_type || $package_type === 'project';
  }

  protected function supportsPackage(PackageInterface $package) {
    $package_name = $package->getPrettyName();
    return strpos($package_name, 'drupal/') === 0;
  }

}
